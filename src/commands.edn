{"RPUSHX" {:fn-name "rpushx", :fn-docstring "Append a value to a list, only if the list exists.\n\nRPUSHX key value\n\nAvailable since: 2.2.0.\n\nTime complexity: O(1)", :fn-params-fixed [key value], :fn-params-more nil, :req-args-fixed ["RPUSHX" key value], :cluster-key-idx 1}
"HINCRBY" {:fn-name "hincrby", :fn-docstring "Increment the integer value of a hash field by the given number.\n\nHINCRBY key field increment\n\nAvailable since: 2.0.0.\n\nTime complexity: O(1)", :fn-params-fixed [key field increment], :fn-params-more nil, :req-args-fixed ["HINCRBY" key field increment], :cluster-key-idx 1}
"ZRANGEBYLEX" {:fn-name "zrangebylex", :fn-docstring "Return a range of members in a sorted set, by lexicographical range.\n\nZRANGEBYLEX key min max [LIMIT offset count]\n\nAvailable since: 2.8.9.\n\nTime complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).", :fn-params-fixed [key min max], :fn-params-more [key min max & args], :req-args-fixed ["ZRANGEBYLEX" key min max], :cluster-key-idx 1}
"HVALS" {:fn-name "hvals", :fn-docstring "Get all the values in a hash.\n\nHVALS key\n\nAvailable since: 2.0.0.\n\nTime complexity: O(N) where N is the size of the hash.", :fn-params-fixed [key], :fn-params-more nil, :req-args-fixed ["HVALS" key], :cluster-key-idx 1}
"XLEN" {:fn-name "xlen", :fn-docstring "Return the number of entires in a stream.\n\nXLEN key\n\nAvailable since: 5.0.0.\n\nTime complexity: O(1)", :fn-params-fixed [key], :fn-params-more nil, :req-args-fixed ["XLEN" key], :cluster-key-idx 1}
"BLPOP" {:fn-name "blpop", :fn-docstring "Remove and get the first element in a list, or block until one is available.\n\nBLPOP key [key ...] timeout\n\nAvailable since: 2.0.0.\n\nTime complexity: O(1)", :fn-params-fixed [key], :fn-params-more [key & args], :req-args-fixed ["BLPOP" key], :cluster-key-idx 1}
"CLUSTER SETSLOT" {:fn-name "cluster-setslot", :fn-docstring "Bind a hash slot to a specific node.\n\nCLUSTER SETSLOT slot IMPORTING|MIGRATING|STABLE|NODE [node-id]\n\nAvailable since: 3.0.0.\n\nTime complexity: O(1)", :fn-params-fixed [slot subcommand], :fn-params-more [slot subcommand & args], :req-args-fixed ["CLUSTER" "SETSLOT" slot subcommand], :cluster-key-idx 2}
"WATCH" {:fn-name "watch", :fn-docstring "Watch the given keys to determine execution of the MULTI/EXEC block.\n\nWATCH key [key ...]\n\nAvailable since: 2.2.0.\n\nTime complexity: O(1) for every key.", :fn-params-fixed [key], :fn-params-more [key & args], :req-args-fixed ["WATCH" key], :cluster-key-idx 1}
"LINDEX" {:fn-name "lindex", :fn-docstring "Get an element from a list by its index.\n\nLINDEX key index\n\nAvailable since: 1.0.0.\n\nTime complexity: O(N) where N is the number of elements to traverse to get to the element at index. This makes asking for the first or the last element of the list O(1).", :fn-params-fixed [key index], :fn-params-more nil, :req-args-fixed ["LINDEX" key index], :cluster-key-idx 1}
"COMMAND GETKEYS" {:fn-name "command-getkeys", :fn-docstring "Extract keys given a full Redis command.\n\nCOMMAND GETKEYS \n\nAvailable since: 2.8.13.\n\nTime complexity: O(N) where N is the number of arguments to the command", :fn-params-fixed [], :fn-params-more nil, :req-args-fixed ["COMMAND" "GETKEYS"], :cluster-key-idx 2}
"CLUSTER KEYSLOT" {:fn-name "cluster-keyslot", :fn-docstring "Returns the hash slot of the specified key.\n\nCLUSTER KEYSLOT key\n\nAvailable since: 3.0.0.\n\nTime complexity: O(N) where N is the number of bytes in the key", :fn-params-fixed [key], :fn-params-more nil, :req-args-fixed ["CLUSTER" "KEYSLOT" key], :cluster-key-idx 2}
"BITPOS" {:fn-name "bitpos", :fn-docstring "Find first bit set or clear in a string.\n\nBITPOS key bit [start] [end]\n\nAvailable since: 2.8.7.\n\nTime complexity: O(N)", :fn-params-fixed [key bit], :fn-params-more [key bit & args], :req-args-fixed ["BITPOS" key bit], :cluster-key-idx 1}
"XADD" {:fn-name "xadd", :fn-docstring "Appends a new entry to a stream.\n\nXADD key ID field string [field string ...]\n\nAvailable since: 5.0.0.\n\nTime complexity: O(log(N)) with N being the number of items already into the stream.", :fn-params-fixed [key ID field string], :fn-params-more [key ID field string & args], :req-args-fixed ["XADD" key ID field string], :cluster-key-idx 1}
"SCRIPT LOAD" {:fn-name "script-load", :fn-docstring "Load the specified Lua script into the script cache..\n\nSCRIPT LOAD script\n\nAvailable since: 2.6.0.\n\nTime complexity: O(N) with N being the length in bytes of the script body.", :fn-params-fixed [script], :fn-params-more nil, :req-args-fixed ["SCRIPT" "LOAD" script], :cluster-key-idx 2}
"SLAVEOF" {:fn-name "slaveof", :fn-docstring "Make the server a slave of another instance, or promote it as master.\n\nSLAVEOF host port\n\nAvailable since: 1.0.0.\n\n", :fn-params-fixed [host port], :fn-params-more nil, :req-args-fixed ["SLAVEOF" host port], :cluster-key-idx 1}
"CLUSTER FAILOVER" {:fn-name "cluster-failover", :fn-docstring "Forces a slave to perform a manual failover of its master..\n\nCLUSTER FAILOVER [FORCE|TAKEOVER]\n\nAvailable since: 3.0.0.\n\nTime complexity: O(1)", :fn-params-fixed [], :fn-params-more [& args], :req-args-fixed ["CLUSTER" "FAILOVER"], :cluster-key-idx 2}
"CLUSTER SET-CONFIG-EPOCH" {:fn-name "cluster-set-config-epoch", :fn-docstring "Set the configuration epoch in a new node.\n\nCLUSTER SET-CONFIG-EPOCH config-epoch\n\nAvailable since: 3.0.0.\n\nTime complexity: O(1)", :fn-params-fixed [config-epoch], :fn-params-more nil, :req-args-fixed ["CLUSTER" "SET-CONFIG-EPOCH" config-epoch], :cluster-key-idx 2}
"EXPIREAT" {:fn-name "expireat", :fn-docstring "Set the expiration for a key as a UNIX timestamp.\n\nEXPIREAT key timestamp\n\nAvailable since: 1.2.0.\n\nTime complexity: O(1)", :fn-params-fixed [key timestamp], :fn-params-more nil, :req-args-fixed ["EXPIREAT" key timestamp], :cluster-key-idx 1}
"OBJECT" {:fn-name "object", :fn-docstring "Inspect the internals of Redis objects.\n\nOBJECT subcommand [arguments [arguments ...]]\n\nAvailable since: 2.2.3.\n\nTime complexity: O(1) for all the currently implemented subcommands.", :fn-params-fixed [subcommand], :fn-params-more [subcommand & args], :req-args-fixed ["OBJECT" subcommand], :cluster-key-idx 1}
"KEYS" {:fn-name "keys", :fn-docstring "Find all keys matching the given pattern.\n\nKEYS pattern\n\nAvailable since: 1.0.0.\n\nTime complexity: O(N) with N being the number of keys in the database, under the assumption that the key names in the database and the given pattern have limited length.", :fn-params-fixed [pattern], :fn-params-more nil, :req-args-fixed ["KEYS" pattern], :cluster-key-idx 1}
"SETNX" {:fn-name "setnx", :fn-docstring "Set the value of a key, only if the key does not exist.\n\nSETNX key value\n\nAvailable since: 1.0.0.\n\nTime complexity: O(1)", :fn-params-fixed [key value], :fn-params-more nil, :req-args-fixed ["SETNX" key value], :cluster-key-idx 1}
"MEMORY MALLOC-STATS" {:fn-name "memory-malloc-stats", :fn-docstring "Show allocator internal stats.\n\nMEMORY MALLOC-STATS \n\nAvailable since: 4.0.0.\n\n", :fn-params-fixed [], :fn-params-more nil, :req-args-fixed ["MEMORY" "MALLOC-STATS"], :cluster-key-idx 2}
"HSTRLEN" {:fn-name "hstrlen", :fn-docstring "Get the length of the value of a hash field.\n\nHSTRLEN key field\n\nAvailable since: 3.2.0.\n\nTime complexity: O(1)", :fn-params-fixed [key field], :fn-params-more nil, :req-args-fixed ["HSTRLEN" key field], :cluster-key-idx 1}
"SYNC" {:fn-name "sync", :fn-docstring "Internal command used for replication.\n\nSYNC \n\nAvailable since: 1.0.0.\n\n", :fn-params-fixed [], :fn-params-more nil, :req-args-fixed ["SYNC"], :cluster-key-idx 1}
"SUNIONSTORE" {:fn-name "sunionstore", :fn-docstring "Add multiple sets and store the resulting set in a key.\n\nSUNIONSTORE destination key [key ...]\n\nAvailable since: 1.0.0.\n\nTime complexity: O(N) where N is the total number of elements in all given sets.", :fn-params-fixed [destination key], :fn-params-more [destination key & args], :req-args-fixed ["SUNIONSTORE" destination key], :cluster-key-idx 1}
"EVAL" {:fn-name "eval", :fn-docstring "Execute a Lua script server side.\n\nEVAL script numkeys key [key ...] arg [arg ...]\n\nAvailable since: 2.6.0.\n\nTime complexity: Depends on the script that is executed.", :fn-params-fixed [script numkeys], :fn-params-more [script numkeys & args], :req-args-fixed ["EVAL" script numkeys], :cluster-key-idx 1}
"CLUSTER ADDSLOTS" {:fn-name "cluster-addslots", :fn-docstring "Assign new hash slots to receiving node.\n\nCLUSTER ADDSLOTS slot [slot ...]\n\nAvailable since: 3.0.0.\n\nTime complexity: O(N) where N is the total number of hash slot arguments", :fn-params-fixed [slot], :fn-params-more [slot & args], :req-args-fixed ["CLUSTER" "ADDSLOTS" slot], :cluster-key-idx 2}
"BRPOP" {:fn-name "brpop", :fn-docstring "Remove and get the last element in a list, or block until one is available.\n\nBRPOP key [key ...] timeout\n\nAvailable since: 2.0.0.\n\nTime complexity: O(1)", :fn-params-fixed [key], :fn-params-more [key & args], :req-args-fixed ["BRPOP" key], :cluster-key-idx 1}
"DECRBY" {:fn-name "decrby", :fn-docstring "Decrement the integer value of a key by the given number.\n\nDECRBY key decrement\n\nAvailable since: 1.0.0.\n\nTime complexity: O(1)", :fn-params-fixed [key decrement], :fn-params-more nil, :req-args-fixed ["DECRBY" key decrement], :cluster-key-idx 1}
"CLIENT GETNAME" {:fn-name "client-getname", :fn-docstring "Get the current connection name.\n\nCLIENT GETNAME \n\nAvailable since: 2.6.9.\n\nTime complexity: O(1)", :fn-params-fixed [], :fn-params-more nil, :req-args-fixed ["CLIENT" "GETNAME"], :cluster-key-idx 2}
"SET" {:fn-name "set", :fn-docstring "Set the string value of a key.\n\nSET key value [expiration EX seconds|PX milliseconds] [NX|XX]\n\nAvailable since: 1.0.0.\n\nTime complexity: O(1)", :fn-params-fixed [key value], :fn-params-more [key value & args], :req-args-fixed ["SET" key value], :cluster-key-idx 1}
"MSET" {:fn-name "mset", :fn-docstring "Set multiple keys to multiple values.\n\nMSET key value [key value ...]\n\nAvailable since: 1.0.1.\n\nTime complexity: O(N) where N is the number of keys to set.", :fn-params-fixed [key value], :fn-params-more [key value & args], :req-args-fixed ["MSET" key value], :cluster-key-idx 1}
"ZRANGE" {:fn-name "zrange", :fn-docstring "Return a range of members in a sorted set, by index.\n\nZRANGE key start stop [WITHSCORES]\n\nAvailable since: 1.2.0.\n\nTime complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements returned.", :fn-params-fixed [key start stop], :fn-params-more [key start stop & args], :req-args-fixed ["ZRANGE" key start stop], :cluster-key-idx 1}
"STRLEN" {:fn-name "strlen", :fn-docstring "Get the length of the value stored in a key.\n\nSTRLEN key\n\nAvailable since: 2.2.0.\n\nTime complexity: O(1)", :fn-params-fixed [key], :fn-params-more nil, :req-args-fixed ["STRLEN" key], :cluster-key-idx 1}
"LRANGE" {:fn-name "lrange", :fn-docstring "Get a range of elements from a list.\n\nLRANGE key start stop\n\nAvailable since: 1.0.0.\n\nTime complexity: O(S+N) where S is the distance of start offset from HEAD for small lists, from nearest end (HEAD or TAIL) for large lists; and N is the number of elements in the specified range.", :fn-params-fixed [key start stop], :fn-params-more nil, :req-args-fixed ["LRANGE" key start stop], :cluster-key-idx 1}
"LPUSH" {:fn-name "lpush", :fn-docstring "Prepend one or multiple values to a list.\n\nLPUSH key value [value ...]\n\nAvailable since: 1.0.0.\n\nTime complexity: O(1)", :fn-params-fixed [key value], :fn-params-more [key value & args], :req-args-fixed ["LPUSH" key value], :cluster-key-idx 1}
"DBSIZE" {:fn-name "dbsize", :fn-docstring "Return the number of keys in the selected database.\n\nDBSIZE \n\nAvailable since: 1.0.0.\n\n", :fn-params-fixed [], :fn-params-more nil, :req-args-fixed ["DBSIZE"], :cluster-key-idx 1}
"EXPIRE" {:fn-name "expire", :fn-docstring "Set a key's time to live in seconds.\n\nEXPIRE key seconds\n\nAvailable since: 1.0.0.\n\nTime complexity: O(1)", :fn-params-fixed [key seconds], :fn-params-more nil, :req-args-fixed ["EXPIRE" key seconds], :cluster-key-idx 1}
"SUBSCRIBE" {:fn-name "subscribe", :fn-docstring "Listen for messages published to the given channels.\n\nSUBSCRIBE channel [channel ...]\n\nAvailable since: 2.0.0.\n\nTime complexity: O(N) where N is the number of channels to subscribe to.", :fn-params-fixed [channel], :fn-params-more [channel & args], :req-args-fixed ["SUBSCRIBE" channel], :cluster-key-idx 1}
"SETRANGE" {:fn-name "setrange", :fn-docstring "Overwrite part of a string at key starting at the specified offset.\n\nSETRANGE key offset value\n\nAvailable since: 2.2.0.\n\nTime complexity: O(1), not counting the time taken to copy the new string in place. Usually, this string is very small so the amortized complexity is O(1). Otherwise, complexity is O(M) with M being the length of the value argument.", :fn-params-fixed [key offset value], :fn-params-more nil, :req-args-fixed ["SETRANGE" key offset value], :cluster-key-idx 1}
"UNSUBSCRIBE" {:fn-name "unsubscribe", :fn-docstring "Stop listening for messages posted to the given channels.\n\nUNSUBSCRIBE [channel [channel ...]]\n\nAvailable since: 2.0.0.\n\nTime complexity: O(N) where N is the number of clients already subscribed to a channel.", :fn-params-fixed [], :fn-params-more [& args], :req-args-fixed ["UNSUBSCRIBE"], :cluster-key-idx 1}
"XREADGROUP" {:fn-name "xreadgroup", :fn-docstring "Return new entries from a stream using a consumer group, or access the history of the pending entries for a given consumer. Can block..\n\nXREADGROUP GROUP group consumer [COUNT count] [BLOCK milliseconds] STREAMS key [key ...] ID [ID ...]\n\nAvailable since: 5.0.0.\n\nTime complexity: For each stream mentioned: O(log(N)+M) with N being the number of elements in the stream and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with COUNT), you can consider it O(log(N)). On the other side, XADD will pay the O(N) time in order to serve the N clients blocked on the stream getting new data.", :fn-params-fixed [group consumer], :fn-params-more [group consumer & args], :req-args-fixed ["XREADGROUP" group consumer], :cluster-key-idx 1}
"ZCARD" {:fn-name "zcard", :fn-docstring "Get the number of members in a sorted set.\n\nZCARD key\n\nAvailable since: 1.2.0.\n\nTime complexity: O(1)", :fn-params-fixed [key], :fn-params-more nil, :req-args-fixed ["ZCARD" key], :cluster-key-idx 1}
"HMSET" {:fn-name "hmset", :fn-docstring "Set multiple hash fields to multiple values.\n\nHMSET key field value [field value ...]\n\nAvailable since: 2.0.0.\n\nTime complexity: O(N) where N is the number of fields being set.", :fn-params-fixed [key field value], :fn-params-more [key field value & args], :req-args-fixed ["HMSET" key field value], :cluster-key-idx 1}
"ZINCRBY" {:fn-name "zincrby", :fn-docstring "Increment the score of a member in a sorted set.\n\nZINCRBY key increment member\n\nAvailable since: 1.2.0.\n\nTime complexity: O(log(N)) where N is the number of elements in the sorted set.", :fn-params-fixed [key increment member], :fn-params-more nil, :req-args-fixed ["ZINCRBY" key increment member], :cluster-key-idx 1}
"RPOP" {:fn-name "rpop", :fn-docstring "Remove and get the last element in a list.\n\nRPOP key\n\nAvailable since: 1.0.0.\n\nTime complexity: O(1)", :fn-params-fixed [key], :fn-params-more nil, :req-args-fixed ["RPOP" key], :cluster-key-idx 1}
"PUBLISH" {:fn-name "publish", :fn-docstring "Post a message to a channel.\n\nPUBLISH channel message\n\nAvailable since: 2.0.0.\n\nTime complexity: O(N+M) where N is the number of clients subscribed to the receiving channel and M is the total number of subscribed patterns (by any client).", :fn-params-fixed [channel message], :fn-params-more nil, :req-args-fixed ["PUBLISH" channel message], :cluster-key-idx 1}
"LLEN" {:fn-name "llen", :fn-docstring "Get the length of a list.\n\nLLEN key\n\nAvailable since: 1.0.0.\n\nTime complexity: O(1)", :fn-params-fixed [key], :fn-params-more nil, :req-args-fixed ["LLEN" key], :cluster-key-idx 1}
"GEORADIUS" {:fn-name "georadius", :fn-docstring "Query a sorted set representing a geospatial index to fetch members matching a given maximum distance from a point.\n\nGEORADIUS key longitude latitude radius m|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count] [ASC|DESC] [STORE key] [STOREDIST key]\n\nAvailable since: 3.2.0.\n\nTime complexity: O(N+log(M)) where N is the number of elements inside the bounding box of the circular area delimited by center and radius and M is the number of items inside the index.", :fn-params-fixed [key longitude latitude radius unit], :fn-params-more [key longitude latitude radius unit & args], :req-args-fixed ["GEORADIUS" key longitude latitude radius unit], :cluster-key-idx 1}
"MIGRATE" {:fn-name "migrate", :fn-docstring "Atomically transfer a key from a Redis instance to another one..\n\nMIGRATE host port key|\"\" destination-db timeout [COPY] [REPLACE] [KEYS key]\n\nAvailable since: 2.6.0.\n\nTime complexity: This command actually executes a DUMP+DEL in the source instance, and a RESTORE in the target instance. See the pages of these commands for time complexity. Also an O(N) data transfer between the two instances is performed.", :fn-params-fixed [host port key destination-db timeout], :fn-params-more [host port key destination-db timeout & args], :req-args-fixed ["MIGRATE" host port key destination-db timeout], :cluster-key-idx 1}
"SINTER" {:fn-name "sinter", :fn-docstring "Intersect multiple sets.\n\nSINTER key [key ...]\n\nAvailable since: 1.0.0.\n\nTime complexity: O(N*M) worst case where N is the cardinality of the smallest set and M is the number of sets.", :fn-params-fixed [key], :fn-params-more [key & args], :req-args-fixed ["SINTER" key], :cluster-key-idx 1}
"TYPE" {:fn-name "type", :fn-docstring "Determine the type stored at key.\n\nTYPE key\n\nAvailable since: 1.0.0.\n\nTime complexity: O(1)", :fn-params-fixed [key], :fn-params-more nil, :req-args-fixed ["TYPE" key], :cluster-key-idx 1}
"ZRANGEBYSCORE" {:fn-name "zrangebyscore", :fn-docstring "Return a range of members in a sorted set, by score.\n\nZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]\n\nAvailable since: 1.0.5.\n\nTime complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).", :fn-params-fixed [key min max], :fn-params-more [key min max & args], :req-args-fixed ["ZRANGEBYSCORE" key min max], :cluster-key-idx 1}
"RENAME" {:fn-name "rename", :fn-docstring "Rename a key.\n\nRENAME key newkey\n\nAvailable since: 1.0.0.\n\nTime complexity: O(1)", :fn-params-fixed [key newkey], :fn-params-more nil, :req-args-fixed ["RENAME" key newkey], :cluster-key-idx 1}
"SCRIPT KILL" {:fn-name "script-kill", :fn-docstring "Kill the script currently in execution..\n\nSCRIPT KILL \n\nAvailable since: 2.6.0.\n\nTime complexity: O(1)", :fn-params-fixed [], :fn-params-more nil, :req-args-fixed ["SCRIPT" "KILL"], :cluster-key-idx 2}
"PING" {:fn-name "ping", :fn-docstring "Ping the server.\n\nPING [message]\n\nAvailable since: 1.0.0.\n\n", :fn-params-fixed [], :fn-params-more [& args], :req-args-fixed ["PING"], :cluster-key-idx 1}
"SCRIPT FLUSH" {:fn-name "script-flush", :fn-docstring "Remove all the scripts from the script cache..\n\nSCRIPT FLUSH \n\nAvailable since: 2.6.0.\n\nTime complexity: O(N) with N being the number of scripts in cache", :fn-params-fixed [], :fn-params-more nil, :req-args-fixed ["SCRIPT" "FLUSH"], :cluster-key-idx 2}
"BZPOPMAX" {:fn-name "bzpopmax", :fn-docstring "Remove and return the member with the highest score from one or more sorted sets, or block until one is available.\n\nBZPOPMAX key [key ...] timeout\n\nAvailable since: 5.0.0.\n\nTime complexity: O(log(N)) with N being the number of elements in the sorted set.", :fn-params-fixed [key], :fn-params-more [key & args], :req-args-fixed ["BZPOPMAX" key], :cluster-key-idx 1}
"MEMORY HELP" {:fn-name "memory-help", :fn-docstring "Show helpful text about the different subcommands.\n\nMEMORY HELP \n\nAvailable since: 4.0.0.\n\n", :fn-params-fixed [], :fn-params-more nil, :req-args-fixed ["MEMORY" "HELP"], :cluster-key-idx 2}
"ZUNIONSTORE" {:fn-name "zunionstore", :fn-docstring "Add multiple sorted sets and store the resulting sorted set in a new key.\n\nZUNIONSTORE destination numkeys key [key ...] [WEIGHTS weight] [AGGREGATE SUM|MIN|MAX]\n\nAvailable since: 2.0.0.\n\nTime complexity: O(N)+O(M log(M)) with N being the sum of the sizes of the input sorted sets, and M being the number of elements in the resulting sorted set.", :fn-params-fixed [destination numkeys key], :fn-params-more [destination numkeys key & args], :req-args-fixed ["ZUNIONSTORE" destination numkeys key], :cluster-key-idx 1}
"CLUSTER NODES" {:fn-name "cluster-nodes", :fn-docstring "Get Cluster config for the node.\n\nCLUSTER NODES \n\nAvailable since: 3.0.0.\n\nTime complexity: O(N) where N is the total number of Cluster nodes", :fn-params-fixed [], :fn-params-more nil, :req-args-fixed ["CLUSTER" "NODES"], :cluster-key-idx 2}
"MSETNX" {:fn-name "msetnx", :fn-docstring "Set multiple keys to multiple values, only if none of the keys exist.\n\nMSETNX key value [key value ...]\n\nAvailable since: 1.0.1.\n\nTime complexity: O(N) where N is the number of keys to set.", :fn-params-fixed [key value], :fn-params-more [key value & args], :req-args-fixed ["MSETNX" key value], :cluster-key-idx 1}
"ZINTERSTORE" {:fn-name "zinterstore", :fn-docstring "Intersect multiple sorted sets and store the resulting sorted set in a new key.\n\nZINTERSTORE destination numkeys key [key ...] [WEIGHTS weight] [AGGREGATE SUM|MIN|MAX]\n\nAvailable since: 2.0.0.\n\nTime complexity: O(N*K)+O(M*log(M)) worst case with N being the smallest input sorted set, K being the number of input sorted sets and M being the number of elements in the resulting sorted set.", :fn-params-fixed [destination numkeys key], :fn-params-more [destination numkeys key & args], :req-args-fixed ["ZINTERSTORE" destination numkeys key], :cluster-key-idx 1}
"CLUSTER MEET" {:fn-name "cluster-meet", :fn-docstring "Force a node cluster to handshake with another node.\n\nCLUSTER MEET ip port\n\nAvailable since: 3.0.0.\n\nTime complexity: O(1)", :fn-params-fixed [ip port], :fn-params-more nil, :req-args-fixed ["CLUSTER" "MEET" ip port], :cluster-key-idx 2}
"PFADD" {:fn-name "pfadd", :fn-docstring "Adds the specified elements to the specified HyperLogLog..\n\nPFADD key element [element ...]\n\nAvailable since: 2.8.9.\n\nTime complexity: O(1) to add every element.", :fn-params-fixed [key element], :fn-params-more [key element & args], :req-args-fixed ["PFADD" key element], :cluster-key-idx 1}
"PFCOUNT" {:fn-name "pfcount", :fn-docstring "Return the approximated cardinality of the set(s) observed by the HyperLogLog at key(s)..\n\nPFCOUNT key [key ...]\n\nAvailable since: 2.8.9.\n\nTime complexity: O(1) with a very small average constant time when called with a single key. O(N) with N being the number of keys, and much bigger constant times, when called with multiple keys.", :fn-params-fixed [key], :fn-params-more [key & args], :req-args-fixed ["PFCOUNT" key], :cluster-key-idx 1}
"CLUSTER INFO" {:fn-name "cluster-info", :fn-docstring "Provides info about Redis Cluster node state.\n\nCLUSTER INFO \n\nAvailable since: 3.0.0.\n\nTime complexity: O(1)", :fn-params-fixed [], :fn-params-more nil, :req-args-fixed ["CLUSTER" "INFO"], :cluster-key-idx 2}
"CLUSTER SLAVES" {:fn-name "cluster-slaves", :fn-docstring "List slave nodes of the specified master node.\n\nCLUSTER SLAVES node-id\n\nAvailable since: 3.0.0.\n\nTime complexity: O(1)", :fn-params-fixed [node-id], :fn-params-more nil, :req-args-fixed ["CLUSTER" "SLAVES" node-id], :cluster-key-idx 2}
"SWAPDB" {:fn-name "swapdb", :fn-docstring "Swaps two Redis databases.\n\nSWAPDB index index\n\nAvailable since: 4.0.0.\n\n", :fn-params-fixed [index index], :fn-params-more nil, :req-args-fixed ["SWAPDB" index index], :cluster-key-idx 1}
"HSCAN" {:fn-name "hscan", :fn-docstring "Incrementally iterate hash fields and associated values.\n\nHSCAN key cursor [MATCH pattern] [COUNT count]\n\nAvailable since: 2.8.0.\n\nTime complexity: O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection..", :fn-params-fixed [key cursor], :fn-params-more [key cursor & args], :req-args-fixed ["HSCAN" key cursor], :cluster-key-idx 1}
"FLUSHDB" {:fn-name "flushdb", :fn-docstring "Remove all keys from the current database.\n\nFLUSHDB [ASYNC]\n\nAvailable since: 1.0.0.\n\n", :fn-params-fixed [], :fn-params-more [& args], :req-args-fixed ["FLUSHDB"], :cluster-key-idx 1}
"PUBSUB" {:fn-name "pubsub", :fn-docstring "Inspect the state of the Pub/Sub subsystem.\n\nPUBSUB subcommand [argument [argument ...]]\n\nAvailable since: 2.8.0.\n\nTime complexity: O(N) for the CHANNELS subcommand, where N is the number of active channels, and assuming constant time pattern matching (relatively short channels and patterns). O(N) for the NUMSUB subcommand, where N is the number of requested channels. O(1) for the NUMPAT subcommand.", :fn-params-fixed [subcommand], :fn-params-more [subcommand & args], :req-args-fixed ["PUBSUB" subcommand], :cluster-key-idx 1}
"ZSCAN" {:fn-name "zscan", :fn-docstring "Incrementally iterate sorted sets elements and associated scores.\n\nZSCAN key cursor [MATCH pattern] [COUNT count]\n\nAvailable since: 2.8.0.\n\nTime complexity: O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection..", :fn-params-fixed [key cursor], :fn-params-more [key cursor & args], :req-args-fixed ["ZSCAN" key cursor], :cluster-key-idx 1}
"PERSIST" {:fn-name "persist", :fn-docstring "Remove the expiration from a key.\n\nPERSIST key\n\nAvailable since: 2.2.0.\n\nTime complexity: O(1)", :fn-params-fixed [key], :fn-params-more nil, :req-args-fixed ["PERSIST" key], :cluster-key-idx 1}
"ZSCORE" {:fn-name "zscore", :fn-docstring "Get the score associated with the given member in a sorted set.\n\nZSCORE key member\n\nAvailable since: 1.2.0.\n\nTime complexity: O(1)", :fn-params-fixed [key member], :fn-params-more nil, :req-args-fixed ["ZSCORE" key member], :cluster-key-idx 1}
"DEBUG OBJECT" {:fn-name "debug-object", :fn-docstring "Get debugging information about a key.\n\nDEBUG OBJECT key\n\nAvailable since: 1.0.0.\n\n", :fn-params-fixed [key], :fn-params-more nil, :req-args-fixed ["DEBUG" "OBJECT" key], :cluster-key-idx 2}
"SPOP" {:fn-name "spop", :fn-docstring "Remove and return one or multiple random members from a set.\n\nSPOP key [count]\n\nAvailable since: 1.0.0.\n\nTime complexity: O(1)", :fn-params-fixed [key], :fn-params-more [key & args], :req-args-fixed ["SPOP" key], :cluster-key-idx 1}
"ZPOPMIN" {:fn-name "zpopmin", :fn-docstring "Remove and return members with the lowest scores in a sorted set.\n\nZPOPMIN key [count]\n\nAvailable since: 5.0.0.\n\nTime complexity: O(log(N)*M) with N being the number of elements in the sorted set, and M being the number of elements popped.", :fn-params-fixed [key], :fn-params-more [key & args], :req-args-fixed ["ZPOPMIN" key], :cluster-key-idx 1}
"MEMORY USAGE" {:fn-name "memory-usage", :fn-docstring "Estimate the memory usage of a key.\n\nMEMORY USAGE key [SAMPLES count]\n\nAvailable since: 4.0.0.\n\nTime complexity: O(N) where N is the number of samples.", :fn-params-fixed [key], :fn-params-more [key & args], :req-args-fixed ["MEMORY" "USAGE" key], :cluster-key-idx 2}
"BRPOPLPUSH" {:fn-name "brpoplpush", :fn-docstring "Pop a value from a list, push it to another list and return it; or block until one is available.\n\nBRPOPLPUSH source destination timeout\n\nAvailable since: 2.2.0.\n\nTime complexity: O(1)", :fn-params-fixed [source destination timeout], :fn-params-more nil, :req-args-fixed ["BRPOPLPUSH" source destination timeout], :cluster-key-idx 1}
"AUTH" {:fn-name "auth", :fn-docstring "Authenticate to the server.\n\nAUTH password\n\nAvailable since: 1.0.0.\n\n", :fn-params-fixed [password], :fn-params-more nil, :req-args-fixed ["AUTH" password], :cluster-key-idx 1}
"EXISTS" {:fn-name "exists", :fn-docstring "Determine if a key exists.\n\nEXISTS key [key ...]\n\nAvailable since: 1.0.0.\n\nTime complexity: O(1)", :fn-params-fixed [key], :fn-params-more [key & args], :req-args-fixed ["EXISTS" key], :cluster-key-idx 1}
"CLUSTER FORGET" {:fn-name "cluster-forget", :fn-docstring "Remove a node from the nodes table.\n\nCLUSTER FORGET node-id\n\nAvailable since: 3.0.0.\n\nTime complexity: O(1)", :fn-params-fixed [node-id], :fn-params-more nil, :req-args-fixed ["CLUSTER" "FORGET" node-id], :cluster-key-idx 2}
"CLUSTER SLOTS" {:fn-name "cluster-slots", :fn-docstring "Get array of Cluster slot to node mappings.\n\nCLUSTER SLOTS \n\nAvailable since: 3.0.0.\n\nTime complexity: O(N) where N is the total number of Cluster nodes", :fn-params-fixed [], :fn-params-more nil, :req-args-fixed ["CLUSTER" "SLOTS"], :cluster-key-idx 2}
"GEOPOS" {:fn-name "geopos", :fn-docstring "Returns longitude and latitude of members of a geospatial index.\n\nGEOPOS key member [member ...]\n\nAvailable since: 3.2.0.\n\nTime complexity: O(log(N)) for each member requested, where N is the number of elements in the sorted set.", :fn-params-fixed [key member], :fn-params-more [key member & args], :req-args-fixed ["GEOPOS" key member], :cluster-key-idx 1}
"PEXPIREAT" {:fn-name "pexpireat", :fn-docstring "Set the expiration for a key as a UNIX timestamp specified in milliseconds.\n\nPEXPIREAT key milliseconds-timestamp\n\nAvailable since: 2.6.0.\n\nTime complexity: O(1)", :fn-params-fixed [key milliseconds-timestamp], :fn-params-more nil, :req-args-fixed ["PEXPIREAT" key milliseconds-timestamp], :cluster-key-idx 1}
"SSCAN" {:fn-name "sscan", :fn-docstring "Incrementally iterate Set elements.\n\nSSCAN key cursor [MATCH pattern] [COUNT count]\n\nAvailable since: 2.8.0.\n\nTime complexity: O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection..", :fn-params-fixed [key cursor], :fn-params-more [key cursor & args], :req-args-fixed ["SSCAN" key cursor], :cluster-key-idx 1}
"HEXISTS" {:fn-name "hexists", :fn-docstring "Determine if a hash field exists.\n\nHEXISTS key field\n\nAvailable since: 2.0.0.\n\nTime complexity: O(1)", :fn-params-fixed [key field], :fn-params-more nil, :req-args-fixed ["HEXISTS" key field], :cluster-key-idx 1}
"XREAD" {:fn-name "xread", :fn-docstring "Return never seen elements in multiple streams, with IDs greater than the ones reported by the caller for each stream. Can block..\n\nXREAD [COUNT count] [BLOCK milliseconds] STREAMS key [key ...] ID [ID ...]\n\nAvailable since: 5.0.0.\n\nTime complexity: For each stream mentioned: O(log(N)+M) with N being the number of elements in the stream and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with COUNT), you can consider it O(log(N)). On the other side, XADD will pay the O(N) time in order to serve the N clients blocked on the stream getting new data.", :fn-params-fixed [], :fn-params-more [& args], :req-args-fixed ["XREAD"], :cluster-key-idx 1}
"TTL" {:fn-name "ttl", :fn-docstring "Get the time to live for a key.\n\nTTL key\n\nAvailable since: 1.0.0.\n\nTime complexity: O(1)", :fn-params-fixed [key], :fn-params-more nil, :req-args-fixed ["TTL" key], :cluster-key-idx 1}
"BGREWRITEAOF" {:fn-name "bgrewriteaof", :fn-docstring "Asynchronously rewrite the append-only file.\n\nBGREWRITEAOF \n\nAvailable since: 1.0.0.\n\n", :fn-params-fixed [], :fn-params-more nil, :req-args-fixed ["BGREWRITEAOF"], :cluster-key-idx 1}
"CLUSTER SAVECONFIG" {:fn-name "cluster-saveconfig", :fn-docstring "Forces the node to save cluster state on disk.\n\nCLUSTER SAVECONFIG \n\nAvailable since: 3.0.0.\n\nTime complexity: O(1)", :fn-params-fixed [], :fn-params-more nil, :req-args-fixed ["CLUSTER" "SAVECONFIG"], :cluster-key-idx 2}
"COMMAND COUNT" {:fn-name "command-count", :fn-docstring "Get total number of Redis commands.\n\nCOMMAND COUNT \n\nAvailable since: 2.8.13.\n\nTime complexity: O(1)", :fn-params-fixed [], :fn-params-more nil, :req-args-fixed ["COMMAND" "COUNT"], :cluster-key-idx 2}
"RPOPLPUSH" {:fn-name "rpoplpush", :fn-docstring "Remove the last element in a list, prepend it to another list and return it.\n\nRPOPLPUSH source destination\n\nAvailable since: 1.2.0.\n\nTime complexity: O(1)", :fn-params-fixed [source destination], :fn-params-more nil, :req-args-fixed ["RPOPLPUSH" source destination], :cluster-key-idx 1}
"PFMERGE" {:fn-name "pfmerge", :fn-docstring "Merge N different HyperLogLogs into a single one..\n\nPFMERGE destkey sourcekey [sourcekey ...]\n\nAvailable since: 2.8.9.\n\nTime complexity: O(N) to merge N HyperLogLogs, but with high constant times.", :fn-params-fixed [destkey sourcekey], :fn-params-more [destkey sourcekey & args], :req-args-fixed ["PFMERGE" destkey sourcekey], :cluster-key-idx 1}
"ECHO" {:fn-name "echo", :fn-docstring "Echo the given string.\n\nECHO message\n\nAvailable since: 1.0.0.\n\n", :fn-params-fixed [message], :fn-params-more nil, :req-args-fixed ["ECHO" message], :cluster-key-idx 1}
"SAVE" {:fn-name "save", :fn-docstring "Synchronously save the dataset to disk.\n\nSAVE \n\nAvailable since: 1.0.0.\n\n", :fn-params-fixed [], :fn-params-more nil, :req-args-fixed ["SAVE"], :cluster-key-idx 1}
"ZLEXCOUNT" {:fn-name "zlexcount", :fn-docstring "Count the number of members in a sorted set between a given lexicographical range.\n\nZLEXCOUNT key min max\n\nAvailable since: 2.8.9.\n\nTime complexity: O(log(N)) with N being the number of elements in the sorted set.", :fn-params-fixed [key min max], :fn-params-more nil, :req-args-fixed ["ZLEXCOUNT" key min max], :cluster-key-idx 1}
"COMMAND INFO" {:fn-name "command-info", :fn-docstring "Get array of specific Redis command details.\n\nCOMMAND INFO command-name [command-name ...]\n\nAvailable since: 2.8.13.\n\nTime complexity: O(N) when N is number of commands to look up", :fn-params-fixed [command-name], :fn-params-more [command-name & args], :req-args-fixed ["COMMAND" "INFO" command-name], :cluster-key-idx 2}
"PEXPIRE" {:fn-name "pexpire", :fn-docstring "Set a key's time to live in milliseconds.\n\nPEXPIRE key milliseconds\n\nAvailable since: 2.6.0.\n\nTime complexity: O(1)", :fn-params-fixed [key milliseconds], :fn-params-more nil, :req-args-fixed ["PEXPIRE" key milliseconds], :cluster-key-idx 1}
"GEOHASH" {:fn-name "geohash", :fn-docstring "Returns members of a geospatial index as standard geohash strings.\n\nGEOHASH key member [member ...]\n\nAvailable since: 3.2.0.\n\nTime complexity: O(log(N)) for each member requested, where N is the number of elements in the sorted set.", :fn-params-fixed [key member], :fn-params-more [key member & args], :req-args-fixed ["GEOHASH" key member], :cluster-key-idx 1}
"HSETNX" {:fn-name "hsetnx", :fn-docstring "Set the value of a hash field, only if the field does not exist.\n\nHSETNX key field value\n\nAvailable since: 2.0.0.\n\nTime complexity: O(1)", :fn-params-fixed [key field value], :fn-params-more nil, :req-args-fixed ["HSETNX" key field value], :cluster-key-idx 1}
"READONLY" {:fn-name "readonly", :fn-docstring "Enables read queries for a connection to a cluster slave node.\n\nREADONLY \n\nAvailable since: 3.0.0.\n\nTime complexity: O(1)", :fn-params-fixed [], :fn-params-more nil, :req-args-fixed ["READONLY"], :cluster-key-idx 1}
"CONFIG SET" {:fn-name "config-set", :fn-docstring "Set a configuration parameter to the given value.\n\nCONFIG SET parameter value\n\nAvailable since: 2.0.0.\n\n", :fn-params-fixed [parameter value], :fn-params-more nil, :req-args-fixed ["CONFIG" "SET" parameter value], :cluster-key-idx 2}
"GETRANGE" {:fn-name "getrange", :fn-docstring "Get a substring of the string stored at a key.\n\nGETRANGE key start end\n\nAvailable since: 2.4.0.\n\nTime complexity: O(N) where N is the length of the returned string. The complexity is ultimately determined by the returned length, but because creating a substring from an existing string is very cheap, it can be considered O(1) for small strings.", :fn-params-fixed [key start end], :fn-params-more nil, :req-args-fixed ["GETRANGE" key start end], :cluster-key-idx 1}
"DEL" {:fn-name "del", :fn-docstring "Delete a key.\n\nDEL key [key ...]\n\nAvailable since: 1.0.0.\n\nTime complexity: O(N) where N is the number of keys that will be removed. When a key to remove holds a value other than a string, the individual complexity for this key is O(M) where M is the number of elements in the list, set, sorted set or hash. Removing a single key that holds a string value is O(1).", :fn-params-fixed [key], :fn-params-more [key & args], :req-args-fixed ["DEL" key], :cluster-key-idx 1}
"TIME" {:fn-name "time", :fn-docstring "Return the current server time.\n\nTIME \n\nAvailable since: 2.6.0.\n\nTime complexity: O(1)", :fn-params-fixed [], :fn-params-more nil, :req-args-fixed ["TIME"], :cluster-key-idx 1}
"COMMAND" {:fn-name "command", :fn-docstring "Get array of Redis command details.\n\nCOMMAND \n\nAvailable since: 2.8.13.\n\nTime complexity: O(N) where N is the total number of Redis commands", :fn-params-fixed [], :fn-params-more nil, :req-args-fixed ["COMMAND"], :cluster-key-idx 1}
"ZREMRANGEBYSCORE" {:fn-name "zremrangebyscore", :fn-docstring "Remove all members in a sorted set within the given scores.\n\nZREMRANGEBYSCORE key min max\n\nAvailable since: 1.2.0.\n\nTime complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements removed by the operation.", :fn-params-fixed [key min max], :fn-params-more nil, :req-args-fixed ["ZREMRANGEBYSCORE" key min max], :cluster-key-idx 1}
"SREM" {:fn-name "srem", :fn-docstring "Remove one or more members from a set.\n\nSREM key member [member ...]\n\nAvailable since: 1.0.0.\n\nTime complexity: O(N) where N is the number of members to be removed.", :fn-params-fixed [key member], :fn-params-more [key member & args], :req-args-fixed ["SREM" key member], :cluster-key-idx 1}
"ZREMRANGEBYLEX" {:fn-name "zremrangebylex", :fn-docstring "Remove all members in a sorted set between the given lexicographical range.\n\nZREMRANGEBYLEX key min max\n\nAvailable since: 2.8.9.\n\nTime complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements removed by the operation.", :fn-params-fixed [key min max], :fn-params-more nil, :req-args-fixed ["ZREMRANGEBYLEX" key min max], :cluster-key-idx 1}
"ZADD" {:fn-name "zadd", :fn-docstring "Add one or more members to a sorted set, or update its score if it already exists.\n\nZADD key [NX|XX] [CH] [INCR] score member [score member ...]\n\nAvailable since: 1.2.0.\n\nTime complexity: O(log(N)) for each item added, where N is the number of elements in the sorted set.", :fn-params-fixed [key], :fn-params-more [key & args], :req-args-fixed ["ZADD" key], :cluster-key-idx 1}
"RPUSH" {:fn-name "rpush", :fn-docstring "Append one or multiple values to a list.\n\nRPUSH key value [value ...]\n\nAvailable since: 1.0.0.\n\nTime complexity: O(1)", :fn-params-fixed [key value], :fn-params-more [key value & args], :req-args-fixed ["RPUSH" key value], :cluster-key-idx 1}
"INCRBY" {:fn-name "incrby", :fn-docstring "Increment the integer value of a key by the given amount.\n\nINCRBY key increment\n\nAvailable since: 1.0.0.\n\nTime complexity: O(1)", :fn-params-fixed [key increment], :fn-params-more nil, :req-args-fixed ["INCRBY" key increment], :cluster-key-idx 1}
"ROLE" {:fn-name "role", :fn-docstring "Return the role of the instance in the context of replication.\n\nROLE \n\nAvailable since: 2.8.12.\n\n", :fn-params-fixed [], :fn-params-more nil, :req-args-fixed ["ROLE"], :cluster-key-idx 1}
"RENAMENX" {:fn-name "renamenx", :fn-docstring "Rename a key, only if the new key does not exist.\n\nRENAMENX key newkey\n\nAvailable since: 1.0.0.\n\nTime complexity: O(1)", :fn-params-fixed [key newkey], :fn-params-more nil, :req-args-fixed ["RENAMENX" key newkey], :cluster-key-idx 1}
"SETBIT" {:fn-name "setbit", :fn-docstring "Sets or clears the bit at offset in the string value stored at key.\n\nSETBIT key offset value\n\nAvailable since: 2.2.0.\n\nTime complexity: O(1)", :fn-params-fixed [key offset value], :fn-params-more nil, :req-args-fixed ["SETBIT" key offset value], :cluster-key-idx 1}
"LINSERT" {:fn-name "linsert", :fn-docstring "Insert an element before or after another element in a list.\n\nLINSERT key BEFORE|AFTER pivot value\n\nAvailable since: 2.2.0.\n\nTime complexity: O(N) where N is the number of elements to traverse before seeing the value pivot. This means that inserting somewhere on the left end on the list (head) can be considered O(1) and inserting somewhere on the right end (tail) is O(N).", :fn-params-fixed [key where pivot value], :fn-params-more nil, :req-args-fixed ["LINSERT" key where pivot value], :cluster-key-idx 1}
"FLUSHALL" {:fn-name "flushall", :fn-docstring "Remove all keys from all databases.\n\nFLUSHALL [ASYNC]\n\nAvailable since: 1.0.0.\n\n", :fn-params-fixed [], :fn-params-more [& args], :req-args-fixed ["FLUSHALL"], :cluster-key-idx 1}
"CLUSTER REPLICATE" {:fn-name "cluster-replicate", :fn-docstring "Reconfigure a node as a slave of the specified master node.\n\nCLUSTER REPLICATE node-id\n\nAvailable since: 3.0.0.\n\nTime complexity: O(1)", :fn-params-fixed [node-id], :fn-params-more nil, :req-args-fixed ["CLUSTER" "REPLICATE" node-id], :cluster-key-idx 2}
"SELECT" {:fn-name "select", :fn-docstring "Change the selected database for the current connection.\n\nSELECT index\n\nAvailable since: 1.0.0.\n\n", :fn-params-fixed [index], :fn-params-more nil, :req-args-fixed ["SELECT" index], :cluster-key-idx 1}
"MGET" {:fn-name "mget", :fn-docstring "Get the values of all the given keys.\n\nMGET key [key ...]\n\nAvailable since: 1.0.0.\n\nTime complexity: O(N) where N is the number of keys to retrieve.", :fn-params-fixed [key], :fn-params-more [key & args], :req-args-fixed ["MGET" key], :cluster-key-idx 1}
"MONITOR" {:fn-name "monitor", :fn-docstring "Listen for all requests received by the server in real time.\n\nMONITOR \n\nAvailable since: 1.0.0.\n\n", :fn-params-fixed [], :fn-params-more nil, :req-args-fixed ["MONITOR"], :cluster-key-idx 1}
"CLUSTER COUNT-FAILURE-REPORTS" {:fn-name "cluster-count-failure-reports", :fn-docstring "Return the number of failure reports active for a given node.\n\nCLUSTER COUNT-FAILURE-REPORTS node-id\n\nAvailable since: 3.0.0.\n\nTime complexity: O(N) where N is the number of failure reports", :fn-params-fixed [node-id], :fn-params-more nil, :req-args-fixed ["CLUSTER" "COUNT-FAILURE-REPORTS" node-id], :cluster-key-idx 2}
"HSET" {:fn-name "hset", :fn-docstring "Set the string value of a hash field.\n\nHSET key field value\n\nAvailable since: 2.0.0.\n\nTime complexity: O(1)", :fn-params-fixed [key field value], :fn-params-more nil, :req-args-fixed ["HSET" key field value], :cluster-key-idx 1}
"QUIT" {:fn-name "quit", :fn-docstring "Close the connection.\n\nQUIT \n\nAvailable since: 1.0.0.\n\n", :fn-params-fixed [], :fn-params-more nil, :req-args-fixed ["QUIT"], :cluster-key-idx 1}
"LTRIM" {:fn-name "ltrim", :fn-docstring "Trim a list to the specified range.\n\nLTRIM key start stop\n\nAvailable since: 1.0.0.\n\nTime complexity: O(N) where N is the number of elements to be removed by the operation.", :fn-params-fixed [key start stop], :fn-params-more nil, :req-args-fixed ["LTRIM" key start stop], :cluster-key-idx 1}
"SCAN" {:fn-name "scan", :fn-docstring "Incrementally iterate the keys space.\n\nSCAN cursor [MATCH pattern] [COUNT count]\n\nAvailable since: 2.8.0.\n\nTime complexity: O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection.", :fn-params-fixed [cursor], :fn-params-more [cursor & args], :req-args-fixed ["SCAN" cursor], :cluster-key-idx 1}
"INCRBYFLOAT" {:fn-name "incrbyfloat", :fn-docstring "Increment the float value of a key by the given amount.\n\nINCRBYFLOAT key increment\n\nAvailable since: 2.6.0.\n\nTime complexity: O(1)", :fn-params-fixed [key increment], :fn-params-more nil, :req-args-fixed ["INCRBYFLOAT" key increment], :cluster-key-idx 1}
"CLIENT PAUSE" {:fn-name "client-pause", :fn-docstring "Stop processing commands from clients for some time.\n\nCLIENT PAUSE timeout\n\nAvailable since: 2.9.50.\n\nTime complexity: O(1)", :fn-params-fixed [timeout], :fn-params-more nil, :req-args-fixed ["CLIENT" "PAUSE" timeout], :cluster-key-idx 2}
"TOUCH" {:fn-name "touch", :fn-docstring "Alters the last access time of a key(s). Returns the number of existing keys specified..\n\nTOUCH key [key ...]\n\nAvailable since: 3.2.1.\n\nTime complexity: O(N) where N is the number of keys that will be touched.", :fn-params-fixed [key], :fn-params-more [key & args], :req-args-fixed ["TOUCH" key], :cluster-key-idx 1}
"RANDOMKEY" {:fn-name "randomkey", :fn-docstring "Return a random key from the keyspace.\n\nRANDOMKEY \n\nAvailable since: 1.0.0.\n\nTime complexity: O(1)", :fn-params-fixed [], :fn-params-more nil, :req-args-fixed ["RANDOMKEY"], :cluster-key-idx 1}
"LASTSAVE" {:fn-name "lastsave", :fn-docstring "Get the UNIX time stamp of the last successful save to disk.\n\nLASTSAVE \n\nAvailable since: 1.0.0.\n\n", :fn-params-fixed [], :fn-params-more nil, :req-args-fixed ["LASTSAVE"], :cluster-key-idx 1}
"SLOWLOG" {:fn-name "slowlog", :fn-docstring "Manages the Redis slow queries log.\n\nSLOWLOG subcommand [argument]\n\nAvailable since: 2.2.12.\n\n", :fn-params-fixed [subcommand], :fn-params-more [subcommand & args], :req-args-fixed ["SLOWLOG" subcommand], :cluster-key-idx 1}
"ZREVRANGE" {:fn-name "zrevrange", :fn-docstring "Return a range of members in a sorted set, by index, with scores ordered from high to low.\n\nZREVRANGE key start stop [WITHSCORES]\n\nAvailable since: 1.2.0.\n\nTime complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements returned.", :fn-params-fixed [key start stop], :fn-params-more [key start stop & args], :req-args-fixed ["ZREVRANGE" key start stop], :cluster-key-idx 1}
"SETEX" {:fn-name "setex", :fn-docstring "Set the value and expiration of a key.\n\nSETEX key seconds value\n\nAvailable since: 2.0.0.\n\nTime complexity: O(1)", :fn-params-fixed [key seconds value], :fn-params-more nil, :req-args-fixed ["SETEX" key seconds value], :cluster-key-idx 1}
"LPOP" {:fn-name "lpop", :fn-docstring "Remove and get the first element in a list.\n\nLPOP key\n\nAvailable since: 1.0.0.\n\nTime complexity: O(1)", :fn-params-fixed [key], :fn-params-more nil, :req-args-fixed ["LPOP" key], :cluster-key-idx 1}
"MEMORY STATS" {:fn-name "memory-stats", :fn-docstring "Show memory usage details.\n\nMEMORY STATS \n\nAvailable since: 4.0.0.\n\n", :fn-params-fixed [], :fn-params-more nil, :req-args-fixed ["MEMORY" "STATS"], :cluster-key-idx 2}
"ZREVRANGEBYSCORE" {:fn-name "zrevrangebyscore", :fn-docstring "Return a range of members in a sorted set, by score, with scores ordered from high to low.\n\nZREVRANGEBYSCORE key max min [WITHSCORES] [LIMIT offset count]\n\nAvailable since: 2.2.0.\n\nTime complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).", :fn-params-fixed [key max min], :fn-params-more [key max min & args], :req-args-fixed ["ZREVRANGEBYSCORE" key max min], :cluster-key-idx 1}
"ZREVRANGEBYLEX" {:fn-name "zrevrangebylex", :fn-docstring "Return a range of members in a sorted set, by lexicographical range, ordered from higher to lower strings..\n\nZREVRANGEBYLEX key max min [LIMIT offset count]\n\nAvailable since: 2.8.9.\n\nTime complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).", :fn-params-fixed [key max min], :fn-params-more [key max min & args], :req-args-fixed ["ZREVRANGEBYLEX" key max min], :cluster-key-idx 1}
"SMOVE" {:fn-name "smove", :fn-docstring "Move a member from one set to another.\n\nSMOVE source destination member\n\nAvailable since: 1.0.0.\n\nTime complexity: O(1)", :fn-params-fixed [source destination member], :fn-params-more nil, :req-args-fixed ["SMOVE" source destination member], :cluster-key-idx 1}
"SMEMBERS" {:fn-name "smembers", :fn-docstring "Get all the members in a set.\n\nSMEMBERS key\n\nAvailable since: 1.0.0.\n\nTime complexity: O(N) where N is the set cardinality.", :fn-params-fixed [key], :fn-params-more nil, :req-args-fixed ["SMEMBERS" key], :cluster-key-idx 1}
"UNLINK" {:fn-name "unlink", :fn-docstring "Delete a key asynchronously in another thread. Otherwise it is just as DEL, but non blocking..\n\nUNLINK key [key ...]\n\nAvailable since: 4.0.0.\n\nTime complexity: O(1) for each key removed regardless of its size. Then the command does O(N) work in a different thread in order to reclaim memory, where N is the number of allocations the deleted objects where composed of.", :fn-params-fixed [key], :fn-params-more [key & args], :req-args-fixed ["UNLINK" key], :cluster-key-idx 1}
"PSUBSCRIBE" {:fn-name "psubscribe", :fn-docstring "Listen for messages published to channels matching the given patterns.\n\nPSUBSCRIBE pattern [pattern ...]\n\nAvailable since: 2.0.0.\n\nTime complexity: O(N) where N is the number of patterns the client is already subscribed to.", :fn-params-fixed [pattern], :fn-params-more [pattern & args], :req-args-fixed ["PSUBSCRIBE" pattern], :cluster-key-idx 1}
"PTTL" {:fn-name "pttl", :fn-docstring "Get the time to live for a key in milliseconds.\n\nPTTL key\n\nAvailable since: 2.6.0.\n\nTime complexity: O(1)", :fn-params-fixed [key], :fn-params-more nil, :req-args-fixed ["PTTL" key], :cluster-key-idx 1}
"SRANDMEMBER" {:fn-name "srandmember", :fn-docstring "Get one or multiple random members from a set.\n\nSRANDMEMBER key [count]\n\nAvailable since: 1.0.0.\n\nTime complexity: Without the count argument O(1), otherwise O(N) where N is the absolute value of the passed count.", :fn-params-fixed [key], :fn-params-more [key & args], :req-args-fixed ["SRANDMEMBER" key], :cluster-key-idx 1}
"EXEC" {:fn-name "exec", :fn-docstring "Execute all commands issued after MULTI.\n\nEXEC \n\nAvailable since: 1.2.0.\n\n", :fn-params-fixed [], :fn-params-more nil, :req-args-fixed ["EXEC"], :cluster-key-idx 1}
"SDIFFSTORE" {:fn-name "sdiffstore", :fn-docstring "Subtract multiple sets and store the resulting set in a key.\n\nSDIFFSTORE destination key [key ...]\n\nAvailable since: 1.0.0.\n\nTime complexity: O(N) where N is the total number of elements in all given sets.", :fn-params-fixed [destination key], :fn-params-more [destination key & args], :req-args-fixed ["SDIFFSTORE" destination key], :cluster-key-idx 1}
"CONFIG GET" {:fn-name "config-get", :fn-docstring "Get the value of a configuration parameter.\n\nCONFIG GET parameter\n\nAvailable since: 2.0.0.\n\n", :fn-params-fixed [parameter], :fn-params-more nil, :req-args-fixed ["CONFIG" "GET" parameter], :cluster-key-idx 2}
"GEORADIUSBYMEMBER" {:fn-name "georadiusbymember", :fn-docstring "Query a sorted set representing a geospatial index to fetch members matching a given maximum distance from a member.\n\nGEORADIUSBYMEMBER key member radius m|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count] [ASC|DESC] [STORE key] [STOREDIST key]\n\nAvailable since: 3.2.0.\n\nTime complexity: O(N+log(M)) where N is the number of elements inside the bounding box of the circular area delimited by center and radius and M is the number of items inside the index.", :fn-params-fixed [key member radius unit], :fn-params-more [key member radius unit & args], :req-args-fixed ["GEORADIUSBYMEMBER" key member radius unit], :cluster-key-idx 1}
"SHUTDOWN" {:fn-name "shutdown", :fn-docstring "Synchronously save the dataset to disk and then shut down the server.\n\nSHUTDOWN [NOSAVE|SAVE]\n\nAvailable since: 1.0.0.\n\n", :fn-params-fixed [], :fn-params-more [& args], :req-args-fixed ["SHUTDOWN"], :cluster-key-idx 1}
"DUMP" {:fn-name "dump", :fn-docstring "Return a serialized version of the value stored at the specified key..\n\nDUMP key\n\nAvailable since: 2.6.0.\n\nTime complexity: O(1) to access the key and additional O(N*M) to serialized it, where N is the number of Redis objects composing the value and M their average size. For small string values the time complexity is thus O(1)+O(1*M) where M is small, so simply O(1).", :fn-params-fixed [key], :fn-params-more nil, :req-args-fixed ["DUMP" key], :cluster-key-idx 1}
"BGSAVE" {:fn-name "bgsave", :fn-docstring "Asynchronously save the dataset to disk.\n\nBGSAVE \n\nAvailable since: 1.0.0.\n\n", :fn-params-fixed [], :fn-params-more nil, :req-args-fixed ["BGSAVE"], :cluster-key-idx 1}
"GEODIST" {:fn-name "geodist", :fn-docstring "Returns the distance between two members of a geospatial index.\n\nGEODIST key member1 member2 [unit]\n\nAvailable since: 3.2.0.\n\nTime complexity: O(log(N))", :fn-params-fixed [key member1 member2], :fn-params-more [key member1 member2 & args], :req-args-fixed ["GEODIST" key member1 member2], :cluster-key-idx 1}
"SCARD" {:fn-name "scard", :fn-docstring "Get the number of members in a set.\n\nSCARD key\n\nAvailable since: 1.0.0.\n\nTime complexity: O(1)", :fn-params-fixed [key], :fn-params-more nil, :req-args-fixed ["SCARD" key], :cluster-key-idx 1}
"SISMEMBER" {:fn-name "sismember", :fn-docstring "Determine if a given value is a member of a set.\n\nSISMEMBER key member\n\nAvailable since: 1.0.0.\n\nTime complexity: O(1)", :fn-params-fixed [key member], :fn-params-more nil, :req-args-fixed ["SISMEMBER" key member], :cluster-key-idx 1}
"CLUSTER RESET" {:fn-name "cluster-reset", :fn-docstring "Reset a Redis Cluster node.\n\nCLUSTER RESET [HARD|SOFT]\n\nAvailable since: 3.0.0.\n\nTime complexity: O(N) where N is the number of known nodes. The command may execute a FLUSHALL as a side effect.", :fn-params-fixed [], :fn-params-more [& args], :req-args-fixed ["CLUSTER" "RESET"], :cluster-key-idx 2}
"CLUSTER DELSLOTS" {:fn-name "cluster-delslots", :fn-docstring "Set hash slots as unbound in receiving node.\n\nCLUSTER DELSLOTS slot [slot ...]\n\nAvailable since: 3.0.0.\n\nTime complexity: O(N) where N is the total number of hash slot arguments", :fn-params-fixed [slot], :fn-params-more [slot & args], :req-args-fixed ["CLUSTER" "DELSLOTS" slot], :cluster-key-idx 2}
"CLIENT LIST" {:fn-name "client-list", :fn-docstring "Get the list of client connections.\n\nCLIENT LIST \n\nAvailable since: 2.4.0.\n\nTime complexity: O(N) where N is the number of client connections", :fn-params-fixed [], :fn-params-more nil, :req-args-fixed ["CLIENT" "LIST"], :cluster-key-idx 2}
"CLIENT REPLY" {:fn-name "client-reply", :fn-docstring "Instruct the server whether to reply to commands.\n\nCLIENT REPLY ON|OFF|SKIP\n\nAvailable since: 3.2.\n\nTime complexity: O(1)", :fn-params-fixed [reply-mode], :fn-params-more nil, :req-args-fixed ["CLIENT" "REPLY" reply-mode], :cluster-key-idx 2}
"DECR" {:fn-name "decr", :fn-docstring "Decrement the integer value of a key by one.\n\nDECR key\n\nAvailable since: 1.0.0.\n\nTime complexity: O(1)", :fn-params-fixed [key], :fn-params-more nil, :req-args-fixed ["DECR" key], :cluster-key-idx 1}
"MULTI" {:fn-name "multi", :fn-docstring "Mark the start of a transaction block.\n\nMULTI \n\nAvailable since: 1.2.0.\n\n", :fn-params-fixed [], :fn-params-more nil, :req-args-fixed ["MULTI"], :cluster-key-idx 1}
"DEBUG SEGFAULT" {:fn-name "debug-segfault", :fn-docstring "Make the server crash.\n\nDEBUG SEGFAULT \n\nAvailable since: 1.0.0.\n\n", :fn-params-fixed [], :fn-params-more nil, :req-args-fixed ["DEBUG" "SEGFAULT"], :cluster-key-idx 2}
"HDEL" {:fn-name "hdel", :fn-docstring "Delete one or more hash fields.\n\nHDEL key field [field ...]\n\nAvailable since: 2.0.0.\n\nTime complexity: O(N) where N is the number of fields to be removed.", :fn-params-fixed [key field], :fn-params-more [key field & args], :req-args-fixed ["HDEL" key field], :cluster-key-idx 1}
"SADD" {:fn-name "sadd", :fn-docstring "Add one or more members to a set.\n\nSADD key member [member ...]\n\nAvailable since: 1.0.0.\n\nTime complexity: O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.", :fn-params-fixed [key member], :fn-params-more [key member & args], :req-args-fixed ["SADD" key member], :cluster-key-idx 1}
"LREM" {:fn-name "lrem", :fn-docstring "Remove elements from a list.\n\nLREM key count value\n\nAvailable since: 1.0.0.\n\nTime complexity: O(N) where N is the length of the list.", :fn-params-fixed [key count value], :fn-params-more nil, :req-args-fixed ["LREM" key count value], :cluster-key-idx 1}
"UNWATCH" {:fn-name "unwatch", :fn-docstring "Forget about all watched keys.\n\nUNWATCH \n\nAvailable since: 2.2.0.\n\nTime complexity: O(1)", :fn-params-fixed [], :fn-params-more nil, :req-args-fixed ["UNWATCH"], :cluster-key-idx 1}
"WAIT" {:fn-name "wait", :fn-docstring "Wait for the synchronous replication of all the write commands sent in the context of the current connection.\n\nWAIT numslaves timeout\n\nAvailable since: 3.0.0.\n\nTime complexity: O(1)", :fn-params-fixed [numslaves timeout], :fn-params-more nil, :req-args-fixed ["WAIT" numslaves timeout], :cluster-key-idx 1}
"SINTERSTORE" {:fn-name "sinterstore", :fn-docstring "Intersect multiple sets and store the resulting set in a key.\n\nSINTERSTORE destination key [key ...]\n\nAvailable since: 1.0.0.\n\nTime complexity: O(N*M) worst case where N is the cardinality of the smallest set and M is the number of sets.", :fn-params-fixed [destination key], :fn-params-more [destination key & args], :req-args-fixed ["SINTERSTORE" destination key], :cluster-key-idx 1}
"SDIFF" {:fn-name "sdiff", :fn-docstring "Subtract multiple sets.\n\nSDIFF key [key ...]\n\nAvailable since: 1.0.0.\n\nTime complexity: O(N) where N is the total number of elements in all given sets.", :fn-params-fixed [key], :fn-params-more [key & args], :req-args-fixed ["SDIFF" key], :cluster-key-idx 1}
"INFO" {:fn-name "info", :fn-docstring "Get information and statistics about the server.\n\nINFO [section]\n\nAvailable since: 1.0.0.\n\n", :fn-params-fixed [], :fn-params-more [& args], :req-args-fixed ["INFO"], :cluster-key-idx 1}
"GEOADD" {:fn-name "geoadd", :fn-docstring "Add one or more geospatial items in the geospatial index represented using a sorted set.\n\nGEOADD key longitude latitude member [longitude latitude member ...]\n\nAvailable since: 3.2.0.\n\nTime complexity: O(log(N)) for each item added, where N is the number of elements in the sorted set.", :fn-params-fixed [key longitude latitude member], :fn-params-more [key longitude latitude member & args], :req-args-fixed ["GEOADD" key longitude latitude member], :cluster-key-idx 1}
"LPUSHX" {:fn-name "lpushx", :fn-docstring "Prepend a value to a list, only if the list exists.\n\nLPUSHX key value\n\nAvailable since: 2.2.0.\n\nTime complexity: O(1)", :fn-params-fixed [key value], :fn-params-more nil, :req-args-fixed ["LPUSHX" key value], :cluster-key-idx 1}
"APPEND" {:fn-name "append", :fn-docstring "Append a value to a key.\n\nAPPEND key value\n\nAvailable since: 2.0.0.\n\nTime complexity: O(1). The amortized time complexity is O(1) assuming the appended value is small and the already present value is of any size, since the dynamic string library used by Redis will double the free space available on every reallocation.", :fn-params-fixed [key value], :fn-params-more nil, :req-args-fixed ["APPEND" key value], :cluster-key-idx 1}
"XRANGE" {:fn-name "xrange", :fn-docstring "Return a range of elements in a stream, with IDs matching the specified IDs interval.\n\nXRANGE key start end [COUNT count]\n\nAvailable since: 5.0.0.\n\nTime complexity: O(log(N)+M) with N being the number of elements in the stream and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with COUNT), you can consider it O(log(N)).", :fn-params-fixed [key start end], :fn-params-more [key start end & args], :req-args-fixed ["XRANGE" key start end], :cluster-key-idx 1}
"HINCRBYFLOAT" {:fn-name "hincrbyfloat", :fn-docstring "Increment the float value of a hash field by the given amount.\n\nHINCRBYFLOAT key field increment\n\nAvailable since: 2.6.0.\n\nTime complexity: O(1)", :fn-params-fixed [key field increment], :fn-params-more nil, :req-args-fixed ["HINCRBYFLOAT" key field increment], :cluster-key-idx 1}
"LSET" {:fn-name "lset", :fn-docstring "Set the value of an element in a list by its index.\n\nLSET key index value\n\nAvailable since: 1.0.0.\n\nTime complexity: O(N) where N is the length of the list. Setting either the first or the last element of the list is O(1).", :fn-params-fixed [key index value], :fn-params-more nil, :req-args-fixed ["LSET" key index value], :cluster-key-idx 1}
"CLUSTER GETKEYSINSLOT" {:fn-name "cluster-getkeysinslot", :fn-docstring "Return local key names in the specified hash slot.\n\nCLUSTER GETKEYSINSLOT slot count\n\nAvailable since: 3.0.0.\n\nTime complexity: O(log(N)) where N is the number of requested keys", :fn-params-fixed [slot count], :fn-params-more nil, :req-args-fixed ["CLUSTER" "GETKEYSINSLOT" slot count], :cluster-key-idx 2}
"XPENDING" {:fn-name "xpending", :fn-docstring "Return information and entries from a stream consumer group pending entries list, that are messages fetched but never acknowledged..\n\nXPENDING key group [start end count] [consumer]\n\nAvailable since: 5.0.0.\n\nTime complexity: O(log(N)+M) with N being the number of elements in the consumer group pending entries list, and M the number of elements being returned. When the command returns just the summary it runs in O(1) time assuming the list of consumers is small, otherwise there is additional O(N) time needed to iterate every consumer.", :fn-params-fixed [key group], :fn-params-more [key group & args], :req-args-fixed ["XPENDING" key group], :cluster-key-idx 1}
"ZREVRANK" {:fn-name "zrevrank", :fn-docstring "Determine the index of a member in a sorted set, with scores ordered from high to low.\n\nZREVRANK key member\n\nAvailable since: 2.0.0.\n\nTime complexity: O(log(N))", :fn-params-fixed [key member], :fn-params-more nil, :req-args-fixed ["ZREVRANK" key member], :cluster-key-idx 1}
"ZRANK" {:fn-name "zrank", :fn-docstring "Determine the index of a member in a sorted set.\n\nZRANK key member\n\nAvailable since: 2.0.0.\n\nTime complexity: O(log(N))", :fn-params-fixed [key member], :fn-params-more nil, :req-args-fixed ["ZRANK" key member], :cluster-key-idx 1}
"BITCOUNT" {:fn-name "bitcount", :fn-docstring "Count set bits in a string.\n\nBITCOUNT key [start end]\n\nAvailable since: 2.6.0.\n\nTime complexity: O(N)", :fn-params-fixed [key], :fn-params-more [key & args], :req-args-fixed ["BITCOUNT" key], :cluster-key-idx 1}
"MEMORY DOCTOR" {:fn-name "memory-doctor", :fn-docstring "Outputs memory problems report.\n\nMEMORY DOCTOR \n\nAvailable since: 4.0.0.\n\n", :fn-params-fixed [], :fn-params-more nil, :req-args-fixed ["MEMORY" "DOCTOR"], :cluster-key-idx 2}
"READWRITE" {:fn-name "readwrite", :fn-docstring "Disables read queries for a connection to a cluster slave node.\n\nREADWRITE \n\nAvailable since: 3.0.0.\n\nTime complexity: O(1)", :fn-params-fixed [], :fn-params-more nil, :req-args-fixed ["READWRITE"], :cluster-key-idx 1}
"GETSET" {:fn-name "getset", :fn-docstring "Set the string value of a key and return its old value.\n\nGETSET key value\n\nAvailable since: 1.0.0.\n\nTime complexity: O(1)", :fn-params-fixed [key value], :fn-params-more nil, :req-args-fixed ["GETSET" key value], :cluster-key-idx 1}
"SCRIPT EXISTS" {:fn-name "script-exists", :fn-docstring "Check existence of scripts in the script cache..\n\nSCRIPT EXISTS sha1 [sha1 ...]\n\nAvailable since: 2.6.0.\n\nTime complexity: O(N) with N being the number of scripts to check (so checking a single script is an O(1) operation).", :fn-params-fixed [sha1], :fn-params-more [sha1 & args], :req-args-fixed ["SCRIPT" "EXISTS" sha1], :cluster-key-idx 2}
"CONFIG RESETSTAT" {:fn-name "config-resetstat", :fn-docstring "Reset the stats returned by INFO.\n\nCONFIG RESETSTAT \n\nAvailable since: 2.0.0.\n\nTime complexity: O(1)", :fn-params-fixed [], :fn-params-more nil, :req-args-fixed ["CONFIG" "RESETSTAT"], :cluster-key-idx 2}
"ZREMRANGEBYRANK" {:fn-name "zremrangebyrank", :fn-docstring "Remove all members in a sorted set within the given indexes.\n\nZREMRANGEBYRANK key start stop\n\nAvailable since: 2.0.0.\n\nTime complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements removed by the operation.", :fn-params-fixed [key start stop], :fn-params-more nil, :req-args-fixed ["ZREMRANGEBYRANK" key start stop], :cluster-key-idx 1}
"SCRIPT DEBUG" {:fn-name "script-debug", :fn-docstring "Set the debug mode for executed scripts..\n\nSCRIPT DEBUG YES|SYNC|NO\n\nAvailable since: 3.2.0.\n\nTime complexity: O(1)", :fn-params-fixed [mode], :fn-params-more nil, :req-args-fixed ["SCRIPT" "DEBUG" mode], :cluster-key-idx 2}
"ZPOPMAX" {:fn-name "zpopmax", :fn-docstring "Remove and return members with the highest scores in a sorted set.\n\nZPOPMAX key [count]\n\nAvailable since: 5.0.0.\n\nTime complexity: O(log(N)*M) with N being the number of elements in the sorted set, and M being the number of elements popped.", :fn-params-fixed [key], :fn-params-more [key & args], :req-args-fixed ["ZPOPMAX" key], :cluster-key-idx 1}
"PSETEX" {:fn-name "psetex", :fn-docstring "Set the value and expiration in milliseconds of a key.\n\nPSETEX key milliseconds value\n\nAvailable since: 2.6.0.\n\nTime complexity: O(1)", :fn-params-fixed [key milliseconds value], :fn-params-more nil, :req-args-fixed ["PSETEX" key milliseconds value], :cluster-key-idx 1}
"EVALSHA" {:fn-name "evalsha", :fn-docstring "Execute a Lua script server side.\n\nEVALSHA sha1 numkeys key [key ...] arg [arg ...]\n\nAvailable since: 2.6.0.\n\nTime complexity: Depends on the script that is executed.", :fn-params-fixed [sha1 numkeys], :fn-params-more [sha1 numkeys & args], :req-args-fixed ["EVALSHA" sha1 numkeys], :cluster-key-idx 1}
"GET" {:fn-name "get", :fn-docstring "Get the value of a key.\n\nGET key\n\nAvailable since: 1.0.0.\n\nTime complexity: O(1)", :fn-params-fixed [key], :fn-params-more nil, :req-args-fixed ["GET" key], :cluster-key-idx 1}
"HLEN" {:fn-name "hlen", :fn-docstring "Get the number of fields in a hash.\n\nHLEN key\n\nAvailable since: 2.0.0.\n\nTime complexity: O(1)", :fn-params-fixed [key], :fn-params-more nil, :req-args-fixed ["HLEN" key], :cluster-key-idx 1}
"XREVRANGE" {:fn-name "xrevrange", :fn-docstring "Return a range of elements in a stream, with IDs matching the specified IDs interval, in reverse order (from greater to smaller IDs) compared to XRANGE.\n\nXREVRANGE key end start [COUNT count]\n\nAvailable since: 5.0.0.\n\nTime complexity: O(log(N)+M) with N being the number of elements in the stream and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with COUNT), you can consider it O(log(N)).", :fn-params-fixed [key end start], :fn-params-more [key end start & args], :req-args-fixed ["XREVRANGE" key end start], :cluster-key-idx 1}
"CONFIG REWRITE" {:fn-name "config-rewrite", :fn-docstring "Rewrite the configuration file with the in memory configuration.\n\nCONFIG REWRITE \n\nAvailable since: 2.8.0.\n\n", :fn-params-fixed [], :fn-params-more nil, :req-args-fixed ["CONFIG" "REWRITE"], :cluster-key-idx 2}
"BZPOPMIN" {:fn-name "bzpopmin", :fn-docstring "Remove and return the member with the lowest score from one or more sorted sets, or block until one is available.\n\nBZPOPMIN key [key ...] timeout\n\nAvailable since: 5.0.0.\n\nTime complexity: O(log(N)) with N being the number of elements in the sorted set.", :fn-params-fixed [key], :fn-params-more [key & args], :req-args-fixed ["BZPOPMIN" key], :cluster-key-idx 1}
"CLIENT KILL" {:fn-name "client-kill", :fn-docstring "Kill the connection of a client.\n\nCLIENT KILL [ip:port] [ID client-id] [TYPE normal|master|slave|pubsub] [ADDR ip:port] [SKIPME yes/no]\n\nAvailable since: 2.4.0.\n\nTime complexity: O(N) where N is the number of client connections", :fn-params-fixed [], :fn-params-more [& args], :req-args-fixed ["CLIENT" "KILL"], :cluster-key-idx 2}
"DISCARD" {:fn-name "discard", :fn-docstring "Discard all commands issued after MULTI.\n\nDISCARD \n\nAvailable since: 2.0.0.\n\n", :fn-params-fixed [], :fn-params-more nil, :req-args-fixed ["DISCARD"], :cluster-key-idx 1}
"HGETALL" {:fn-name "hgetall", :fn-docstring "Get all the fields and values in a hash.\n\nHGETALL key\n\nAvailable since: 2.0.0.\n\nTime complexity: O(N) where N is the size of the hash.", :fn-params-fixed [key], :fn-params-more nil, :req-args-fixed ["HGETALL" key], :cluster-key-idx 1}
"HMGET" {:fn-name "hmget", :fn-docstring "Get the values of all the given hash fields.\n\nHMGET key field [field ...]\n\nAvailable since: 2.0.0.\n\nTime complexity: O(N) where N is the number of fields being requested.", :fn-params-fixed [key field], :fn-params-more [key field & args], :req-args-fixed ["HMGET" key field], :cluster-key-idx 1}
"CLIENT SETNAME" {:fn-name "client-setname", :fn-docstring "Set the current connection name.\n\nCLIENT SETNAME connection-name\n\nAvailable since: 2.6.9.\n\nTime complexity: O(1)", :fn-params-fixed [connection-name], :fn-params-more nil, :req-args-fixed ["CLIENT" "SETNAME" connection-name], :cluster-key-idx 2}
"SORT" {:fn-name "sort", :fn-docstring "Sort the elements in a list, set or sorted set.\n\nSORT key [BY pattern] [LIMIT offset count] [GET pattern [GET pattern ...]] [ASC|DESC] [ALPHA] [STORE destination]\n\nAvailable since: 1.0.0.\n\nTime complexity: O(N+M*log(M)) where N is the number of elements in the list or set to sort, and M the number of returned elements. When the elements are not sorted, complexity is currently O(N) as there is a copy step that will be avoided in next releases.", :fn-params-fixed [key], :fn-params-more [key & args], :req-args-fixed ["SORT" key], :cluster-key-idx 1}
"BITFIELD" {:fn-name "bitfield", :fn-docstring "Perform arbitrary bitfield integer operations on strings.\n\nBITFIELD key [GET type offset] [SET type offset value] [INCRBY type offset increment] [OVERFLOW WRAP|SAT|FAIL]\n\nAvailable since: 3.2.0.\n\nTime complexity: O(1) for each subcommand specified", :fn-params-fixed [key], :fn-params-more [key & args], :req-args-fixed ["BITFIELD" key], :cluster-key-idx 1}
"HKEYS" {:fn-name "hkeys", :fn-docstring "Get all the fields in a hash.\n\nHKEYS key\n\nAvailable since: 2.0.0.\n\nTime complexity: O(N) where N is the size of the hash.", :fn-params-fixed [key], :fn-params-more nil, :req-args-fixed ["HKEYS" key], :cluster-key-idx 1}
"ZREM" {:fn-name "zrem", :fn-docstring "Remove one or more members from a sorted set.\n\nZREM key member [member ...]\n\nAvailable since: 1.2.0.\n\nTime complexity: O(M*log(N)) with N being the number of elements in the sorted set and M the number of elements to be removed.", :fn-params-fixed [key member], :fn-params-more [key member & args], :req-args-fixed ["ZREM" key member], :cluster-key-idx 1}
"HGET" {:fn-name "hget", :fn-docstring "Get the value of a hash field.\n\nHGET key field\n\nAvailable since: 2.0.0.\n\nTime complexity: O(1)", :fn-params-fixed [key field], :fn-params-more nil, :req-args-fixed ["HGET" key field], :cluster-key-idx 1}
"MEMORY PURGE" {:fn-name "memory-purge", :fn-docstring "Ask the allocator to release memory.\n\nMEMORY PURGE \n\nAvailable since: 4.0.0.\n\n", :fn-params-fixed [], :fn-params-more nil, :req-args-fixed ["MEMORY" "PURGE"], :cluster-key-idx 2}
"ZCOUNT" {:fn-name "zcount", :fn-docstring "Count the members in a sorted set with scores within the given values.\n\nZCOUNT key min max\n\nAvailable since: 2.0.0.\n\nTime complexity: O(log(N)) with N being the number of elements in the sorted set.", :fn-params-fixed [key min max], :fn-params-more nil, :req-args-fixed ["ZCOUNT" key min max], :cluster-key-idx 1}
"PUNSUBSCRIBE" {:fn-name "punsubscribe", :fn-docstring "Stop listening for messages posted to channels matching the given patterns.\n\nPUNSUBSCRIBE [pattern [pattern ...]]\n\nAvailable since: 2.0.0.\n\nTime complexity: O(N+M) where N is the number of patterns the client is already subscribed and M is the number of total patterns subscribed in the system (by any client).", :fn-params-fixed [], :fn-params-more [& args], :req-args-fixed ["PUNSUBSCRIBE"], :cluster-key-idx 1}
"GETBIT" {:fn-name "getbit", :fn-docstring "Returns the bit value at offset in the string value stored at key.\n\nGETBIT key offset\n\nAvailable since: 2.2.0.\n\nTime complexity: O(1)", :fn-params-fixed [key offset], :fn-params-more nil, :req-args-fixed ["GETBIT" key offset], :cluster-key-idx 1}
"RESTORE" {:fn-name "restore", :fn-docstring "Create a key using the provided serialized value, previously obtained using DUMP..\n\nRESTORE key ttl serialized-value [REPLACE]\n\nAvailable since: 2.6.0.\n\nTime complexity: O(1) to create the new key and additional O(N*M) to reconstruct the serialized value, where N is the number of Redis objects composing the value and M their average size. For small string values the time complexity is thus O(1)+O(1*M) where M is small, so simply O(1). However for sorted set values the complexity is O(N*M*log(N)) because inserting values into sorted sets is O(log(N)).", :fn-params-fixed [key ttl serialized-value], :fn-params-more [key ttl serialized-value & args], :req-args-fixed ["RESTORE" key ttl serialized-value], :cluster-key-idx 1}
"BITOP" {:fn-name "bitop", :fn-docstring "Perform bitwise operations between strings.\n\nBITOP operation destkey key [key ...]\n\nAvailable since: 2.6.0.\n\nTime complexity: O(N)", :fn-params-fixed [operation destkey key], :fn-params-more [operation destkey key & args], :req-args-fixed ["BITOP" operation destkey key], :cluster-key-idx 1}
"CLUSTER COUNTKEYSINSLOT" {:fn-name "cluster-countkeysinslot", :fn-docstring "Return the number of local keys in the specified hash slot.\n\nCLUSTER COUNTKEYSINSLOT slot\n\nAvailable since: 3.0.0.\n\nTime complexity: O(1)", :fn-params-fixed [slot], :fn-params-more nil, :req-args-fixed ["CLUSTER" "COUNTKEYSINSLOT" slot], :cluster-key-idx 2}
"SUNION" {:fn-name "sunion", :fn-docstring "Add multiple sets.\n\nSUNION key [key ...]\n\nAvailable since: 1.0.0.\n\nTime complexity: O(N) where N is the total number of elements in all given sets.", :fn-params-fixed [key], :fn-params-more [key & args], :req-args-fixed ["SUNION" key], :cluster-key-idx 1}
"INCR" {:fn-name "incr", :fn-docstring "Increment the integer value of a key by one.\n\nINCR key\n\nAvailable since: 1.0.0.\n\nTime complexity: O(1)", :fn-params-fixed [key], :fn-params-more nil, :req-args-fixed ["INCR" key], :cluster-key-idx 1}
"MOVE" {:fn-name "move", :fn-docstring "Move a key to another database.\n\nMOVE key db\n\nAvailable since: 1.0.0.\n\nTime complexity: O(1)", :fn-params-fixed [key db], :fn-params-more nil, :req-args-fixed ["MOVE" key db], :cluster-key-idx 1}}